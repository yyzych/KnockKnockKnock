例：
{
	"employees":[
		{
			"firstName":"Bill","lastName":"Gates"
		},
		{
			"firstName":"Bill2","lastName":"Gates"
		},
		{
			"firstName":"Bill3","lastName":"Gates"
		}
	]
}

类似 XML
	JSON 是纯文本
	JSON 具有“自我描述性”（人类可读）
	JSON 具有层级结构（值中存在值）
	JSON 可通过 JavaScript 进行解析
	JSON 数据可使用 AJAX 进行传输
相比 XML 的不同之处
	没有结束标签
	更短
	读写的速度更快
	能够使用内建的 JavaScript eval() 方法进行解析
	使用数组
	不使用保留字


JSON 最常见的用法之一，是从 web 服务器上读取 JSON 数据（作为文件或作为 HttpRequest），将 JSON 数据转换为 JavaScript 对象，然后在网页中使用该数据。
为什么使用 JSON？
对于 AJAX 应用程序来说，JSON 比 XML 更快更易使用：
	使用 XML
		读取 XML 文档
		使用 XML DOM 来循环遍历文档
		读取值并存储在变量中
	使用 JSON
		读取 JSON 字符串
		用 eval() 处理 JSON 字符串


JSON 语法规则
	JSON 语法是 JavaScript 对象表示法语法的子集。
		数据在名称/值对中-----名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值。值可以是：数字（整数或浮点数）;字符串（在双引号中）;逻辑值（true 或 false）;数组（在方括号中）;对象（在花括号中）;null.
		数据由逗号分隔
		花括号保存对象
		方括号保存数组


JSON 文件
	JSON 文件的文件类型是 ".json"
	JSON 文本的 MIME 类型是 "application/json"


JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象。eval() 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误.
JSON 解析器将 JSON 转换为 JavaScript 对象是更安全的做法。JSON 解析器只能识别 JSON 文本，而不会编译脚本。在浏览器中，原生的 JSON 支持，而且 JSON 解析器的速度更快。

JSON的属性虽然有双引号，但是其实是和javascript没有区别，还是一样引用就行了。就当成是javascript对象就好了。